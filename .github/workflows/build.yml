name: Build Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: holiday-planner
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Get EC2 Instance IDs by Tag
        id: get_instance_ids
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:Environment,Values=Production" --query "Reservations[].Instances[].InstanceId" --output text)
          echo "Instance IDs: $INSTANCE_IDS"

      # - name: Trigger EC2 to Update Docker Container
      #   run: |
      #     INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:Environment,Values=Production" --query "Reservations[].Instances[].InstanceId" --output text)
      #     echo "Instance IDs: $INSTANCE_IDS"
      #     if [ -z "$INSTANCE_IDS" ]; then
      #       echo "No instances found with the specified tag. Exiting."
      #       exit 1
      #     fi
      #     TARGETS=$(echo $INSTANCE_IDS | awk '{for(i=1;i<=NF;i++) printf("{\"Key\":\"instanceIds\",\"Values\":[\"%s\"]}%s", $i, i==NF?ORS:",")} ')
      #     echo "SSM Targets: [$TARGETS]"
      #     aws ssm send-command \
      #       --document-name "UpdateDockerContainer" \
      #       --targets "[$TARGETS]" \
      #       --comment "Update Docker Container" \
      #       --parameters '{}' \
      #       --region eu-west-2
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ secrets.AWS_REGION }}


      - name: Output image tag
        id: image_tag
        run: echo "::set-output name=image_tag::${{ github.sha }}"
